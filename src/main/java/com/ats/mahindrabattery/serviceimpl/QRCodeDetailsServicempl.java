package com.ats.mahindrabattery.serviceimpl;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;



import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;

import com.ats.mahindrabattery.entity.AuditTrailDetailsEntity;
import com.ats.mahindrabattery.entity.QRCodeDetailsEntity;
import com.ats.mahindrabattery.repository.AuditTrailDetailsRepository;
import com.ats.mahindrabattery.repository.QRCodeDetailsRepository;
import com.ats.mahindrabattery.service.QRCodeDetailsService;
import com.ats.mahindrabattery.util.QRCodeGenerator;
import com.google.zxing.WriterException;

@Service
public class QRCodeDetailsServicempl implements QRCodeDetailsService {

	@Autowired
	private QRCodeDetailsRepository qrCodeDetailsRepository;
	@Autowired
	private QRCodeGenerator qrCodeGenerator;
	@Autowired
	private AuditTrailDetailsRepository auditTrailDetailsRepository;

	public QRCodeDetailsEntity addQRCodeDetails(QRCodeDetailsEntity qrCodeDetailsEntity)
			throws WriterException, IOException {
		Date dNow = new Date();
		SimpleDateFormat ft = new SimpleDateFormat("dd MMM yyyy HH:mm:ss");
		String currentDate = ft.format(dNow);

		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		String name = authentication.getName();
		System.out.println("authentication:" + name);
		List<QRCodeDetailsEntity> list = qrCodeDetailsRepository.findByQrCodeData(qrCodeDetailsEntity.getQrCodeData());
//		System.out.println("QRCode=" + qrCodeDetailsEntity.getQrCodeData());
//		System.out.println("id="+qrCodeDetailsEntity.getQrCodeId());
//		System.out.println("list size=" + list.size());
		if (list.size() == 0) {
			System.out.println("qr ::"+qrCodeDetailsEntity.getQrCodeId());
			qrCodeDetailsEntity.setQrCodeId(qrCodeDetailsEntity.getQrCodeId());
			qrCodeGenerator.generateQRCode(qrCodeDetailsEntity);
			qrCodeDetailsEntity.setIsQRCodeGenerated(1);
			
			AuditTrailDetailsEntity auditTrailDetailsEntity = new AuditTrailDetailsEntity();
			auditTrailDetailsEntity.setOperatorActions(
					"QR code generated by " + name + " for part number  " + qrCodeDetailsEntity.getMaterialCode()
							);
			auditTrailDetailsEntity.setField("QR code generated");
			auditTrailDetailsEntity.setAfterValue(0);
			auditTrailDetailsEntity.setBeforeValue(0);
			auditTrailDetailsEntity.setReason("QR code generated");
//			Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
//			String name = authentication.getName();
			System.out.println(" name :: " + name);
			auditTrailDetailsEntity.setUsername(name);
			auditTrailDetailsEntity.setDatetimeC(currentDate);
			auditTrailDetailsRepository.save(auditTrailDetailsEntity);

			
			return qrCodeDetailsRepository.save(qrCodeDetailsEntity);
		}
		return null;
	}

	public List<QRCodeDetailsEntity> findAllQRCodeDetails() {
		try {
			List<QRCodeDetailsEntity> qrCodeDetails = qrCodeDetailsRepository.findAll();
			return qrCodeDetails;
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		return null;
	}

}
